package ru.pdl.codewards;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

class HammingCodeTest {
  private HammingCode objTF = new HammingCode();

  @Test
  public void test_encode_function() {
    assertEquals("000111111000111000000000000111111000000111000111000111111111111000000111", objTF.encode("hey"), "Should work with short word");
    assertEqualsobjTF.encode("The Sensei told me that i can do this kata"), "Should work with longer word");
    assertEquals("000111000111000111000000000000111111000000111111000111111111000000111111000111111111000111000000", objTF.encode("T3st"), "Should work with numbers");
    assertEquals("000111000111000111000000000000111111111111111111000111111111000000111111000111111111000111000000000000111000000000000111000000111000000111000111", objTF.encode("T?st!%"), "Should work with special characters");
  }

  @Test
  public void test_decode_function() {
    assertEquals("hey", objTF.decode("100111111000111001000010000111111000000111001111000111110110111000010111"), "Should work with short word");
    assertEquals("The Sensei told me that i can do this kata", objTF.decodehould work with longer word");
    assertEquals("T3st", objTF.decode("000111000111000111000001000000111111000000111111000111111111000000111011000111111111000111000000"), "Should work with numbers");
    assertEquals("T?st!%", objTF.decode("000111000111000111000010000000111111111111011111000111111111000000111111000111101111000111000000000000111000000000000111000000111000000111000111"), "Should work with special characters");
  }
}